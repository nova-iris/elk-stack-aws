---
# Kibana installation and configuration tasks - derived from successful manual installation

# Include OS-specific variables
- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: kibana

# Include version-specific variable overrides
- name: Include version-specific variables
  include_vars: "{{ kibana_version_major }}.yml"
  when: kibana_version_major is defined
  ignore_errors: yes
  tags: kibana

# 1. Add Elasticsearch GPG key
- name: Download Elasticsearch GPG key
  shell: >
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | 
    sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
  args:
    creates: /usr/share/keyrings/elasticsearch-keyring.gpg
  tags: kibana

# 2. Add Elastic repository
- name: Add Elastic repository
  shell: >
    echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] 
    https://artifacts.elastic.co/packages/{{ kibana_version_major | default('8') }}.x/apt stable main" | 
    sudo tee /etc/apt/sources.list.d/elastic-{{ kibana_version_major | default('8') }}.x.list
  args:
    creates: /etc/apt/sources.list.d/elastic-{{ kibana_version_major | default('8') }}.x.list
  tags: kibana

# 3. Update package lists
- name: Update apt cache
  apt:
    update_cache: yes
  tags: kibana

# 4. Install Kibana
- name: Install Kibana
  apt:
    name: "kibana{% if kibana_version is defined and kibana_version != 'latest' %}={{ kibana_version }}{% endif %}"
    state: present
  register: kibana_install
  tags: kibana

# 5. Backup original configuration
- name: Backup original Kibana configuration
  copy:
    src: /etc/kibana/kibana.yml
    dest: /etc/kibana/kibana.yml.backup
    remote_src: yes
    force: no
  ignore_errors: yes
  when: kibana_install.changed
  tags: kibana

# 6. Configure Kibana to bind to all interfaces (using sed-like approach)
- name: Configure Kibana to bind to all interfaces
  lineinfile:
    path: /etc/kibana/kibana.yml
    regexp: '^#server\.host: "localhost"'
    line: 'server.host: "0.0.0.0"'
    state: present
  tags: kibana

# 7. Ensure server.host is set properly if not found by previous task
- name: Ensure server.host is set
  lineinfile:
    path: /etc/kibana/kibana.yml
    regexp: '^server\.host:'
    line: 'server.host: "0.0.0.0"'
    state: present
  tags: kibana

# 8. Generate Kibana enrollment token
- name: Check if Kibana is already enrolled
  shell: "grep -q 'elasticsearch.hosts' /etc/kibana/kibana.yml || (systemctl status kibana && curl -s http://{{ ansible_default_ipv4.address }}:5601)"
  register: kibana_already_enrolled
  ignore_errors: yes
  changed_when: false
  tags: kibana

- name: Generate Kibana enrollment token
  shell: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
  register: kibana_token
  changed_when: false
  when: kibana_already_enrolled is failed
  tags: kibana

# 9. Display enrollment token (for troubleshooting)
- name: Display Kibana enrollment token
  debug:
    msg: "Enrollment token: {{ kibana_token.stdout | default('Not generated - Kibana likely already enrolled') }}"
  tags: kibana

# 10. Perform Kibana enrollment
- name: Enroll Kibana with Elasticsearch
  shell: echo "y" | /usr/share/kibana/bin/kibana-setup --enrollment-token "{{ kibana_token.stdout }}"
  register: kibana_enrollment
  failed_when: false  # Never fail this step to continue
  when: kibana_already_enrolled is failed and kibana_token is defined and kibana_token.stdout is defined
  tags: kibana

# 11. Display enrollment result
- name: Display enrollment result
  debug:
    msg: "{{ kibana_enrollment.stdout_lines | default([]) }}"
  tags: kibana

# 12. Enable and start Kibana service
- name: Reload systemd
  systemd:
    daemon_reload: yes
  tags: kibana

- name: Enable Kibana service
  systemd:
    name: kibana.service
    enabled: yes
  tags: kibana

- name: Start Kibana service
  systemd:
    name: kibana.service
    state: started
  tags: kibana

# 13. Wait for Kibana to start - use multiple check methods for reliability
- name: Wait for Kibana to become available
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:5601/api/status"
    status_code: [200, 302, 301, 307]  # Accept redirects too
    follow_redirects: none
    validate_certs: no
    timeout: 5
  register: result
  until: result.status is defined and result.status in [200, 302, 301, 307]
  retries: 20
  delay: 10
  ignore_errors: yes
  tags: kibana

# 14. Alternative check using netcat if URI module fails
- name: Verify Kibana port is listening
  shell: "nc -z -v {{ ansible_default_ipv4.address }} 5601"
  register: nc_result
  until: nc_result.rc == 0
  retries: 12
  delay: 10
  ignore_errors: yes
  when: result.failed is defined and result.failed
  tags: kibana

# 15. Print success message
- name: Print Kibana access information
  debug:
    msg: 
      - "Kibana should now be accessible at http://{{ ansible_host }}:5601"
      - "If running locally, use http://{{ ansible_default_ipv4.address }}:5601"
  tags: kibana