---
# Kibana installation and configuration tasks

# Include OS-specific variables
- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"
  tags: kibana

# Include version-specific variable overrides
- name: Include version-specific variables
  include_vars: "{{ kibana_version_major }}.yml"
  when: kibana_version_major is defined
  ignore_errors: yes
  tags: kibana

# Update apt cache
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: kibana

- name: Install apt-transport-https
  apt:
    name: apt-transport-https
    state: present
  tags: kibana

# Add Elasticsearch GPG key
- name: Download Elasticsearch GPG key
  shell: >
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | 
    sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
  args:
    creates: /usr/share/keyrings/elasticsearch-keyring.gpg
  tags: kibana

# Add Elastic repository
- name: Add Elastic repository
  shell: >
    echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] 
    https://artifacts.elastic.co/packages/{{ kibana_version_major | default('8') }}.x/apt stable main" | 
    sudo tee /etc/apt/sources.list.d/elastic-{{ kibana_version_major | default('8') }}.x.list
  args:
    creates: /etc/apt/sources.list.d/elastic-{{ kibana_version_major | default('8') }}.x.list
  tags: kibana

- name: Update apt cache after adding repository
  apt:
    update_cache: yes
  tags: kibana

# Install Kibana
- name: Install Kibana
  apt:
    name: "kibana{% if kibana_version is defined and kibana_version != 'latest' %}={{ kibana_version }}{% endif %}"
    state: present
  register: kibana_install
  tags: kibana

# Backup original configuration
- name: Backup original Kibana configuration
  copy:
    src: /etc/kibana/kibana.yml
    dest: /etc/kibana/kibana.yml.backup
    remote_src: yes
    force: no
  ignore_errors: yes
  when: kibana_install.changed
  tags: kibana

# Configure Kibana to bind to all interfaces
- name: Configure Kibana to bind to all interfaces
  lineinfile:
    path: /etc/kibana/kibana.yml
    regexp: '^(#)?server\.host:'
    line: 'server.host: "0.0.0.0"'
    state: present
  notify: restart kibana
  tags: kibana

# Get CA certificate from Elasticsearch
- name: Find Elasticsearch CA certificate
  find:
    paths: /etc/elasticsearch
    patterns: "http_ca.crt"
    recurse: yes
  register: ca_cert_find
  tags: kibana

- name: Display found CA certificate
  debug:
    var: ca_cert_find
  tags: kibana

# If no CA cert found in /etc/elasticsearch, try elsewhere
- name: Search for CA certificate in other locations
  find:
    paths: 
      - /var/lib/elasticsearch
      - /usr/share/elasticsearch
    patterns: "http_ca.crt"
    recurse: yes
  register: ca_cert_find_alt
  when: ca_cert_find.matched == 0
  tags: kibana

# Generate Kibana enrollment token
- name: Generate Kibana enrollment token
  shell: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
  register: kibana_token
  changed_when: false
  tags: kibana

- name: Display Kibana enrollment token
  debug:
    var: kibana_token.stdout
  tags: kibana

# Enable and start Kibana service
- name: Reload systemd
  systemd:
    daemon_reload: yes
  tags: kibana

- name: Enable Kibana service
  systemd:
    name: kibana.service
    enabled: yes
  tags: kibana

- name: Start Kibana service
  systemd:
    name: kibana.service
    state: started
  tags: kibana